@page "/tileset"
@using System.IO
@using System.Text.Json

<main class="tool-container">

    <section class="tileset-container">
        @if (ImageData is not null)
        {
            <style>
                .tileset {
                    background-image: url("@(ImageSrc)");
                    grid-template-rows: repeat(@NumRows, 1fr);
                    grid-template-columns: repeat(@NumCols, 1fr);
                    aspect-ratio: @ImageWidth / @ImageHeight;
                    width: calc(100% * @ImageWidth / @ImageHeight);
                    gap: @(((float)ImageWidth / ImageHeight) * TilesetProperties.TileGapHeight)px @(((float)ImageWidth / ImageHeight) * TilesetProperties.TileGapWidth)px;
                }

                    .tileset .tile {
                        border-color: @TilesetProperties.GridColor@(TilesetProperties.GridColorAlpha.ToString("X2"));
                    }

            </style>

            <div class="tileset">
                @for (int row = 0; row < NumRows; row++)
                {
                    for (int col = 0; col < NumCols; col++)
                    {
                        var r = row;
                        var c = col;
                        var selected = SelectedTile?.Col == c && SelectedTile.Row == r;
                        var hasTile = Tiles.TryGetValue((c, r), out var tile);
                        <div class="tile @(selected ? "selected" : "")" @onclick="() => EditTile(r, c)" data-tooltip="@($"({c}, {r}) - {tile?.Name ?? "unset"}")">
                            @if (hasTile && tile!.HasContent)
                            {
                                <span class="tile-used"></span>
                            }
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <div>
                <h2>
                    Import a tileset
                </h2>
            </div>
        }
    </section>

    <article class="controls-container">
        <nav>
            <ul>

                <li><a aria-current=@(CurrentTab == Tabs.Import) @onclick="@(() => CurrentTab = Tabs.Import)">Import</a></li>
                <li><a aria-current=@(CurrentTab == Tabs.Tileset) @onclick="@(() => CurrentTab = Tabs.Tileset)">Tileset</a></li>
                <li><a aria-current=@(CurrentTab == Tabs.Properties) @onclick="@(() => CurrentTab = Tabs.Properties)">Properties</a></li>
                <li><a aria-current=@(CurrentTab == Tabs.Tile) @onclick="@(() => CurrentTab = Tabs.Tile)">Tile</a></li>
                <li><a aria-current=@(CurrentTab == Tabs.Export) @onclick="@(() => CurrentTab = Tabs.Export)">Export</a></li>
            </ul>
        </nav>
        @if (CurrentTab == Tabs.Import)
        {
            <label>
                Load image
                <InputFile OnChange="LoadImage" />
            </label>
            <label>
                Load save file
                <InputFile OnChange="LoadSaveFile" />
            </label>
        }
        @if (CurrentTab == Tabs.Tileset)
        {
            <EditForm Model="TilesetProperties">
                <fieldset class="grid">
                    <label>
                        Tile width
                        <InputNumber @onfocusout="ApplyGrid" @bind-Value="TilesetProperties.TileWidth" />
                    </label>
                    <label>
                        Tile height
                        <InputNumber @onfocusout="ApplyGrid" @bind-Value="TilesetProperties.TileHeight" />
                    </label>
                </fieldset>
                <label>
                    <input type="checkbox" role="switch" />
                    Link size
                </label>

                <hr />
                <fieldset class="grid">
                    <label>
                        Tile gap width
                        <InputNumber @onfocusout="ApplyGrid" @bind-Value="TilesetProperties.TileGapWidth" />
                    </label>
                    <label>
                        Tile gap height
                        <InputNumber @onfocusout="ApplyGrid" @bind-Value="TilesetProperties.TileGapHeight" />
                    </label>
                </fieldset>
                <label>
                    <input type="checkbox" role="switch" />
                    Link gap size
                </label>
                <hr />
                <fieldset class="grid">
                    <label>
                        Grid Color
                        <input type="color" @onfocusout="GenerateJsonOutput" @bind="TilesetProperties.GridColor" />
                    </label>
                    <label>
                        Grid Alpha
                        <input type="range" min="0" max="255" @onfocusout="GenerateJsonOutput" @bind="TilesetProperties.GridColorAlpha" />
                    </label>
                </fieldset>
            </EditForm>
        }
        @if (CurrentTab == Tabs.Properties)
        {
            @if (TilesetProperties.GlobalProperties.Count > 0)
            {
                <ul>
                    @foreach (var name in TilesetProperties.GlobalProperties)
                    {
                        var n = name;
                        <li @onclick=@(() => { GlobalProperty = n.Name; OldGlobalProperty = n.Name; GlobalPropertyType = n.Type; OldGlobalPropertyType = n.Type; })>
                            @n.Name - @n.Type
                        </li>
                    }
                </ul>
            }
            else
            {
                <div>
                    No properties yet
                </div>
            }
            <hr />
            var isAdding = string.IsNullOrWhiteSpace(OldGlobalProperty);
            <fieldset>
                <label>
                    @if (isAdding)
                    {
                        @:New property name
                    }
                    else
                    {
                        @:Property name
                    }
                    <input type="string" @bind="GlobalProperty" />
                </label>
                <label>
                    @if (isAdding)
                    {
                        @:New property type
                    }
                    else
                    {
                        @:Property type
                    }
                    <select @bind="GlobalPropertyType">
                        <option selected>
                            string
                        </option>
                        <option>
                            bool
                        </option>
                        <option>
                            int
                        </option>
                        <option>
                            float
                        </option>
                    </select>
                </label>
            </fieldset>
            <button @onclick="AddGlobalProperty">@(isAdding ? "Add" : "Edit") property</button>
        }
        @if (CurrentTab == Tabs.Tile)
        {
            @if (SelectedTile is not null)
            {
                <h6>
                    (@SelectedTile.Col, @SelectedTile.Row)
                </h6>
                <EditForm Model="SelectedTile" class="tile-properties-container">

                    <fieldset>
                        <label>
                            Name
                            <InputText type="string" @onfocusout="GenerateJsonOutput" @bind-Value="SelectedTile.Name" />
                        </label>
                        <label>
                            Id
                            <InputText type="string" @onfocusout="GenerateJsonOutput" @bind-Value="SelectedTile.Id" />
                        </label>
                    </fieldset>

                    <h3>Properties</h3>

                    @if (SelectedTile.PropertyTypes is not null)
                    {
                        <fieldset>
                            @foreach (var (name, type) in SelectedTile.PropertyTypes)
                            {
                                var n = name;
                                var t = type;

                                <label>
                                    @if (t == "string")
                                    {
                                        @n
                                        <InputText @bind-Value="@SelectedTile.StringValues[n]" @onfocusout="GenerateJsonOutput" />
                                    }
                                    else if (t == "bool")
                                    {
                                        <InputCheckbox @bind-Value="@SelectedTile.BoolValues[n]" @onfocusout="GenerateJsonOutput" />
                                        @n
                                    }
                                    else if (t == "int")
                                    {
                                        @n
                                        <InputNumber @bind-Value="@SelectedTile.IntValues[n]" step="1" @onfocusout="GenerateJsonOutput" />
                                    }
                                    else if (t == "float")
                                    {
                                        @n
                                        <InputNumber @bind-Value="@SelectedTile.FloatValues[n]" step="any" @onfocusout="GenerateJsonOutput" />
                                    }
                                </label>
                            }
                        </fieldset>
                    }
                </EditForm>
            }
            else
            {
                <h4>
                    Select a tile first
                </h4>
            }
        }
        @if (CurrentTab == Tabs.Export)
        {
            <pre>
            <code>
                    @Output
                    </code>
                </pre>
            <button @onclick="SaveFile">Save to file</button>
        }
    </article>
</main>



