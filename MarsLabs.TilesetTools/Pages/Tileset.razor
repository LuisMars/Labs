@page "/"
@using System.IO
@using System.Text.Json
@using BlazorPanzoom

<main class="tool-container @(LargeSidebar ? "large" : "")">

    <section class="tileset-container">
        @if (ImageSrc is not null)
        {
            <style>
                .tileset {
                    background-image: url("@(ImageSrc)");
                    grid-template-rows: repeat(@NumRows, 1fr);
                    grid-template-columns: repeat(@NumCols, 1fr);
                    aspect-ratio: @TilesetProperties.ImageWidth / @TilesetProperties.ImageHeight;
                    width: calc(100% * @TilesetProperties.ImageWidth / @TilesetProperties.ImageHeight);
                    gap: @(((float)TilesetProperties.ImageWidth / TilesetProperties.ImageHeight) * TilesetProperties.TileGapHeight)px @(((float)TilesetProperties.ImageWidth / TilesetProperties.ImageHeight) * TilesetProperties.TileGapWidth)px;
                }

                    .tileset .tile {
                        border-color: @TilesetProperties.GridColor@(TilesetProperties.GridColorAlpha.ToString("X2"));
                    }

            </style>
            <Panzoom @ref="Panzoom" PanzoomOptions=@(new PanzoomOptions { MaxScale = 10 }) WheelMode="@WheelMode.ZoomWithWheel" >                
                <div @ref="@context.ElementReference" class="tileset">
                    @for (int row = 0; row < NumRows; row++)
                    {
                        for (int col = 0; col < NumCols; col++)
                        {
                            var r = row;
                            var c = col;
                            var selected = SelectedTiles.Any(SelectedTile => SelectedTile?.Col == c && SelectedTile.Row == r);
                            var hasTile = Tiles.TryGetValue((c, r), out var tile);
                            <div class="tile @(selected ? "selected" : "")" @onclick="e => EditTileAsync(c, r)">  @* data-tooltip="@($"({c}, {r}) - {tile?.Name ?? "unset"}")" *@
                                @if (hasTile && tile!.HasContent)
                                {
                                    <span class="tile-used"></span>
                                }
                            </div>
                        }
                    }
                </div>
            </Panzoom>
        }
        else
        {
            <div>
                <h2>
                    Import a tileset
                </h2>
            </div>
        }
    </section>

    <article class="controls-container">
        <header>
            <nav>
                <ul>
                    <li><a aria-current=@(CurrentTab == Tabs.Import) @onclick="@(() => CurrentTab = Tabs.Import)">Import</a></li>
                    <li><a aria-current=@(CurrentTab == Tabs.Tileset) @onclick="@(() => CurrentTab = Tabs.Tileset)">Tileset</a></li>
                    <li><a aria-current=@(CurrentTab == Tabs.Properties) @onclick="@(() => CurrentTab = Tabs.Properties)">Properties</a></li>
                    <li><a aria-current=@(CurrentTab == Tabs.Tile) @onclick="@(() => CurrentTab = Tabs.Tile)">Tile</a></li>
                    <li><a aria-current=@(CurrentTab == Tabs.Export) @onclick="@(() => { CurrentTab = Tabs.Export; SaveAsync(); })">Export</a></li>
                </ul>
            </nav>
        </header>
        @if (CurrentTab == Tabs.Import)
        {
            <label>
                Load image
                <InputFile OnChange="LoadImage" />
            </label>
            <label>
                Load save file
                <InputFile OnChange="LoadSaveFile" />
            </label>
        }
        @if (CurrentTab == Tabs.Tileset)
        {
            <EditForm Model="TilesetProperties">
                <fieldset>
                    <label>
                        Tile width
                        <InputNumber @onfocusout="ApplyGridAsync" @onclick="ApplyGridAsync" @bind-Value="TilesetProperties.TileWidth" />
                    </label>
                    <label>
                        Tile height
                        <InputNumber disabled=@TilesetProperties.LinkTileSize @onfocusout="ApplyGridAsync" @onclick="ApplyGridAsync" @bind-Value="TilesetProperties.TileHeight" />
                    </label>
                </fieldset>
                <label>
                    <input type="checkbox" role="switch" @bind="TilesetProperties.LinkTileSize" @onfocusout="SaveAsync" />
                    Link size
                </label>

                <hr />
                <fieldset>
                    <label>
                        Tile gap width
                        <InputNumber @onfocusout="ApplyGridAsync" @onclick="ApplyGridAsync" @bind-Value="TilesetProperties.TileGapWidth" />
                    </label>
                    <label>
                        Tile gap height
                        <InputNumber disabled=@TilesetProperties.LinkTileGapSize @onfocusout="ApplyGridAsync" @onclick="ApplyGridAsync" @bind-Value="TilesetProperties.TileGapHeight" />
                    </label>
                </fieldset>
                <label>
                    <input type="checkbox" role="switch" @bind="TilesetProperties.LinkTileGapSize" @onfocusout="SaveAsync" />
                    Link gap size
                </label>
                <hr />
                <fieldset>
                    <label>
                        Grid Color
                        <input type="color" @onfocusout="SaveAsync" @bind="TilesetProperties.GridColor" />
                    </label>
                    <label>
                        Grid Alpha
                        <input type="range" min="0" max="255" @onfocusout="SaveAsync" @bind="TilesetProperties.GridColorAlpha" />
                    </label>
                </fieldset>
            </EditForm>
        }
        @if (CurrentTab == Tabs.Properties)
        {
            @if (TilesetProperties.Properties.Count > 0)
            {
                <table>
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Type
                            </th>
                            <th>
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var name in TilesetProperties.Properties)
                        {
                            var n = name;
                            <tr>
                                <td role="link" @onclick=@(() => { GlobalProperty = n.Name; OldGlobalProperty = n.Name; GlobalPropertyType = n.Type; OldGlobalPropertyType = n.Type; })>
                                    @n.Name
                                </td>
                                <td>
                                    @n.Type
                                </td>
                                <td role="link" class="delete" @onclick=@(() => DeletePropertyAsync(n.Name))>Delete</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div>
                    No properties yet
                </div>
            }
            <hr />
            var isAdding = string.IsNullOrWhiteSpace(OldGlobalProperty);
            <fieldset>
                <label>
                    @if (isAdding)
                    {
                        @:New property name
                    }
                    else
                    {
                        @:Property name
                    }
                    <input type="string" @bind="GlobalProperty" />
                </label>
                <label>
                    @if (isAdding)
                    {
                        @:New property type
                    }
                    else
                    {
                        @:Property type
                    }
                    <select @bind="GlobalPropertyType">
                        <option selected>
                            string
                        </option>
                        <option>
                            bool
                        </option>
                        <option>
                            int
                        </option>
                        <option>
                            float
                        </option>
                        <option>
                            tag
                        </option>
                    </select>
                </label>
            </fieldset>
            <button @onclick="AddGlobalPropertyAsync">@(isAdding ? "Add" : "Edit") property</button>
        }
        @if (CurrentTab == Tabs.Tile)
        {
            @if (SelectedTiles.Count > 0)
            {
                var multiSelection = SelectedTiles.Count > 1;
                var selectedTile = SelectedTiles[0];                
                @if (!multiSelection) {
                    <h6>
                        (@selectedTile.Col, @selectedTile.Row)
                    </h6>
                } else
                {
                    <h6>
                        Multiple tiles selected
                    </h6>
                }
                <EditForm Model="selectedTile" class="tile-properties-container" >

                    @if (!multiSelection)
                    {
                        <fieldset>
                            <label>
                                Name
                                <InputText @onblur="SaveAsync" @bind-Value="selectedTile.Name" />
                            </label>
                        </fieldset>
                    }
                    <h3>Properties</h3>

                    @if (selectedTile.PropertyTypes is not null)
                    {
                        <fieldset>
                            @foreach (var (name, type) in selectedTile.PropertyTypes.Where(p => p.Value != "tag"))
                            {
                                var n = name;
                                var t = type;

                                <label>
                                    @if (t == "string")
                                    {
                                        @n
                                        <InputText @bind-Value="@selectedTile.StringValues[n]" @onfocusout="SaveAsync" />
                                    }
                                    else if (t == "bool")
                                    {
                                        <InputCheckbox @bind-Value="@selectedTile.BoolValues[n]" @onfocusout="SaveAsync" />
                                        @n
                                    }
                                    else if (t == "int")
                                    {
                                        @n
                                        <InputNumber @bind-Value="@selectedTile.IntValues[n]" step="1" @onfocusout="SaveAsync" />
                                    }
                                    else if (t == "float")
                                    {
                                        @n
                                        <InputNumber @bind-Value="@selectedTile.FloatValues[n]" step="0.1" @onfocusout="SaveAsync" />
                                    }
                                </label>
                            }   
                        </fieldset>
                        <fieldset>
                            @if (TilesetProperties.Properties.Any(p => p.Type == "tag")) 
                            {
                                <label>
                                    Tags 
                                    <select @bind="@selectedTile.Tags" multiple @onfocusout="SaveAsync" >
                                        @foreach (var name in TilesetProperties.Properties.Where(p => p.Type == "tag").Select(p => p.Name))
                                        {
                                            var n = name;
                                            <option>@n</option>
                                        }
                                    </select>
                                    <kbd>ctrl</kbd> to select multiple tags
                                </label>
                            }
                        </fieldset>
                    }
                </EditForm>
                <div role="group">
                    <button @onclick="@(() => ChangeTileAsync(-1))">
                        Previous tile
                    </button>
                    <button @onclick="@(() => ChangeTileAsync(1))">
                        Next tile
                    </button>
                </div>
            }
            else
            {
                <h4>
                    Select a tile first
                </h4>
            }
        }
        @if (CurrentTab == Tabs.Export)
        {
            <pre><code>
                @Output
            </code></pre>

            <button @onclick="SaveFile">Save to file</button>
        }

        <footer>
            <label>
                <input type="checkbox" role="switch" @bind="LargeSidebar" />
                @if (!LargeSidebar)
                {
                    @:Small sidebar
                }
                else
                {
                    @:Large sidebar
                }
            </label>
        </footer>
    </article>
</main>